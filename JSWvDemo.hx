/*
** WvDemo.hx
**
** Copyright (c) 2008 - 2013 Peter McQuillan
**
** All Rights Reserved.
**                       
** Distributed under the BSD Software License (see license.txt)  
**
*/

class JSWvDemo
{
    static var temp_buffer : Array < Int > = new Array();

    /* This Int array contains an entire (very short) sample WavPack file 
	** So, if you want a web page with a WavPack file that plays when (say) a person presses a button, you could encode
	** an entire file and store it as data. However this is not recommended as it takes up a lot of space!
	*/

    static var sampleWavPackFile : Array < Int > = 
    [
0x77, 0x76, 0x70, 0x6B, 0x6A, 0x07, 0x00, 0x00, 0x07, 0x04, 0x00, 0x00, 0xCA, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xCA, 0x08, 0x00, 0x00, 0x04, 0x18, 0x9C, 0x01, 0x4A, 0xEE, 0x93, 0x1A, 0x21, 0x16, 0x52, 0x49, 0x46, 0x46, 0x40, 0x09, 
0x00, 0x00, 0x57, 0x41, 0x56, 0x45, 0x66, 0x6D, 0x74, 0x20, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x11, 0x2B, 
0x00, 0x00, 0x11, 0x2B, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x64, 0x61, 0x74, 0x61, 0xCA, 0x08, 0x00, 0x00, 0x02, 0x01, 
0x57, 0x56, 0x03, 0x01, 0x60, 0xF7, 0x04, 0x02, 0x00, 0xFE, 0x00, 0xFE, 0x05, 0x03, 0x00, 0x01, 0x2A, 0x0A, 0x88, 0x09, 
0x25, 0x02, 0x02, 0x00, 0x02, 0x01, 0x8A, 0x82, 0x03, 0x00, 0x1F, 0x7D, 0xF6, 0x13, 0x88, 0xBC, 0x4F, 0x3C, 0x2D, 0xEF, 
0x13, 0x6F, 0xAB, 0x82, 0x0F, 0x80, 0x87, 0xDD, 0x36, 0x03, 0xC0, 0xC3, 0x54, 0xA4, 0xA6, 0xE1, 0xFF, 0xFE, 0xDF, 0xFF, 
0x7F, 0xEB, 0xC3, 0x49, 0x24, 0x92, 0x52, 0xA4, 0x2B, 0x8F, 0x88, 0xEF, 0xFF, 0x7F, 0xFD, 0xFF, 0xEF, 0x99, 0xD5, 0x49, 
0xC8, 0xD0, 0xF2, 0x1F, 0x7F, 0xFF, 0xFF, 0xB7, 0xFF, 0xFF, 0xF7, 0x28, 0x7E, 0x3B, 0xFD, 0xBF, 0xEA, 0x9F, 0x3E, 0x5C, 
0x02, 0xBA, 0x52, 0xE2, 0xF4, 0xB3, 0xFF, 0x7F, 0x2F, 0xFB, 0xFF, 0xEF, 0x8A, 0xFF, 0xFA, 0x3F, 0xFD, 0xFF, 0x33, 0x47, 
0x4F, 0x75, 0xCA, 0x5C, 0x41, 0x1B, 0x68, 0x66, 0xCC, 0xA9, 0x4F, 0xFE, 0xBF, 0xFB, 0x0F, 0xF4, 0xFF, 0xE3, 0xFF, 0x77, 
0x8A, 0x71, 0x74, 0x24, 0x36, 0xBE, 0x01, 0x14, 0x21, 0xE0, 0xD5, 0x73, 0x7F, 0x39, 0x76, 0xE1, 0x3F, 0xFD, 0x63, 0xD0, 
0xE9, 0x58, 0x27, 0x8A, 0xB1, 0xA2, 0x01, 0x16, 0x85, 0x99, 0x7D, 0x69, 0x7D, 0xFE, 0xBC, 0xFF, 0xE6, 0x77, 0x15, 0xBA, 
0xA9, 0x4E, 0x2B, 0x0C, 0xA8, 0x08, 0x30, 0x4A, 0xC4, 0xEA, 0x8D, 0xFC, 0xF4, 0x37, 0x7C, 0xFB, 0x19, 0x65, 0x4D, 0x15, 
0x54, 0x2A, 0x04, 0xDB, 0x12, 0x0C, 0x26, 0x52, 0x68, 0x5D, 0xF0, 0xCA, 0x6F, 0x78, 0xE6, 0xF7, 0x0D, 0x41, 0xE3, 0x68, 
0x6C, 0x58, 0x36, 0x43, 0xA8, 0x08, 0x80, 0x88, 0x49, 0xF7, 0xDA, 0xD3, 0x4C, 0x86, 0xCF, 0xF0, 0x57, 0x96, 0x40, 0x66, 
0x41, 0x19, 0x82, 0x21, 0x46, 0x41, 0x48, 0xE5, 0xE2, 0xCB, 0xCA, 0x97, 0x2E, 0xDB, 0x77, 0xD2, 0x44, 0xE5, 0xC9, 0x19, 
0x82, 0x21, 0x46, 0x51, 0x62, 0xDC, 0xA9, 0xF9, 0x32, 0xCB, 0x8E, 0x41, 0x37, 0xEA, 0x84, 0xE1, 0xC3, 0x15, 0xC1, 0x10, 
0x84, 0x48, 0xE8, 0x05, 0x97, 0x9A, 0x88, 0x6F, 0x1F, 0x23, 0x37, 0xFE, 0xC6, 0x58, 0x71, 0x1A, 0xC2, 0xB0, 0x90, 0x40, 
0xA9, 0x27, 0xE0, 0x77, 0x27, 0x7C, 0x74, 0xC4, 0x1A, 0xF8, 0xAB, 0xE8, 0x05, 0xA3, 0x68, 0x08, 0x95, 0x2A, 0x4A, 0x68, 
0x0F, 0xFB, 0x3C, 0xCB, 0xA7, 0xCB, 0x00, 0xFE, 0x89, 0x16, 0xF3, 0x31, 0xD0, 0xAA, 0xA0, 0x32, 0xC0, 0xCC, 0x74, 0x8E, 
0xED, 0xBC, 0xF2, 0xE1, 0x1A, 0x4D, 0x3F, 0x30, 0x14, 0x77, 0x86, 0x59, 0x15, 0x54, 0x15, 0x88, 0x91, 0x5B, 0x7D, 0xD9, 
0x4B, 0xC6, 0x62, 0xBB, 0xB8, 0x3B, 0x49, 0xE2, 0xE6, 0xB2, 0x55, 0x83, 0x51, 0x84, 0x84, 0xC0, 0x9A, 0xF9, 0xEF, 0xF0, 
0xDB, 0xEB, 0xB4, 0x43, 0x6D, 0x30, 0xB3, 0xDC, 0x0C, 0xE2, 0x28, 0x42, 0xA6, 0x90, 0xCA, 0xE1, 0x7E, 0xD1, 0x5B, 0x87, 
0xD2, 0xA5, 0xB5, 0x58, 0x0C, 0xB8, 0x11, 0xC2, 0x2A, 0xC8, 0xA1, 0x88, 0xB4, 0xDB, 0x75, 0x4A, 0x9B, 0x2F, 0xA5, 0x5A, 
0x5F, 0x3C, 0x06, 0x9C, 0x08, 0x41, 0x0E, 0x84, 0x40, 0x62, 0xDF, 0x71, 0x94, 0xF3, 0xBE, 0x6B, 0x66, 0x3C, 0x51, 0x36, 
0x14, 0xA6, 0x68, 0x18, 0x06, 0x09, 0x14, 0x7A, 0x00, 0xBF, 0xD3, 0xF3, 0xE9, 0x11, 0xA3, 0x96, 0x58, 0x32, 0x09, 0x90, 
0x3C, 0x84, 0x43, 0x09, 0x96, 0x79, 0x80, 0x3B, 0xBD, 0xC9, 0xD7, 0xED, 0x98, 0x7A, 0x64, 0x24, 0x3F, 0xA3, 0xBA, 0x84, 
0x83, 0x80, 0x5A, 0x33, 0x20, 0x39, 0xB1, 0xDE, 0xB7, 0xBB, 0x10, 0xF6, 0x85, 0x27, 0xE0, 0x90, 0x48, 0x95, 0x50, 0x55, 
0x42, 0x46, 0x36, 0x07, 0x56, 0x5F, 0xFA, 0x6A, 0x00, 0x47, 0xD7, 0xDB, 0xC4, 0xC5, 0x51, 0xAB, 0x08, 0x84, 0x41, 0x60, 
0x60, 0x12, 0x7E, 0xF1, 0x94, 0x5D, 0x6A, 0x17, 0x96, 0x7F, 0x92, 0x18, 0xEE, 0x76, 0x10, 0xE4, 0x10, 0x99, 0x61, 0x22, 
0x47, 0x0F, 0xB0, 0xF7, 0xE3, 0xB4, 0x7E, 0x57, 0x5C, 0x38, 0x98, 0x21, 0xC8, 0x51, 0x8C, 0x02, 0x72, 0x0E, 0x97, 0x8B, 
0x9D, 0x74, 0x6A, 0xCF, 0x57, 0x42, 0xC9, 0x07, 0x1B, 0x84, 0x38, 0x05, 0x39, 0xC5, 0x86, 0x93, 0x60, 0xEA, 0xED, 0xB7, 
0x68, 0x2E, 0x24, 0x2C, 0x20, 0x2A, 0x68, 0x8C, 0xC1, 0x08, 0x8B, 0x3C, 0xA2, 0x2F, 0x62, 0xFB, 0xC3, 0x25, 0x91, 0x2B, 
0x24, 0xE1, 0x88, 0x08, 0x16, 0x63, 0x30, 0xC2, 0x56, 0xCF, 0xA0, 0x3D, 0x77, 0x7C, 0x7B, 0x48, 0x84, 0x2A, 0xF1, 0x86, 
0x20, 0x92, 0x88, 0x40, 0x1C, 0x61, 0xA9, 0x27, 0x98, 0xF2, 0x57, 0xF9, 0x3A, 0x8D, 0x26, 0xFD, 0xB5, 0x61, 0xC2, 0x40, 
0x11, 0x82, 0x38, 0x81, 0x36, 0xF3, 0x42, 0x8B, 0xEB, 0x7D, 0x38, 0x0A, 0x40, 0xC5, 0xDB, 0xE8, 0x42, 0xB1, 0x5D, 0x03, 
0x39, 0x84, 0x22, 0x72, 0xED, 0xF1, 0xCF, 0xDC, 0x5B, 0x40, 0xA2, 0xEB, 0x79, 0x21, 0xD3, 0x5D, 0x87, 0x20, 0x88, 0x50, 
0x40, 0x55, 0x3C, 0x79, 0x81, 0x57, 0xEC, 0xD2, 0xB7, 0x3B, 0x23, 0xAE, 0x83, 0x0F, 0x42, 0x20, 0xE1, 0x20, 0xD0, 0xF9, 
0x78, 0x98, 0x9E, 0xBD, 0x27, 0xF8, 0x74, 0x62, 0x2C, 0x10, 0xAC, 0x70, 0x90, 0xE2, 0x08, 0xDB, 0xBC, 0xE1, 0xA4, 0x04, 
0x7C, 0xB9, 0xA1, 0xA9, 0xCC, 0x3B, 0x22, 0x98, 0xA0, 0x41, 0x8E, 0x12, 0x6C, 0xF3, 0x08, 0x76, 0x79, 0xCA, 0x57, 0x6D, 
0x0E, 0xEA, 0xCF, 0x4E, 0x9F, 0x31, 0x13, 0xE2, 0x40, 0x00, 0x33, 0x2F, 0x48, 0x6D, 0x4D, 0xF7, 0x87, 0x4D, 0x10, 0x39, 
0xDF, 0x17, 0x3E, 0xD7, 0x85, 0x0D, 0x07, 0x19, 0x0A, 0xD8, 0x95, 0xF3, 0xDF, 0x58, 0xCD, 0x46, 0xE1, 0xF5, 0x2E, 0xA8, 
0xF8, 0x2E, 0x74, 0x18, 0xA3, 0x1C, 0xC6, 0x64, 0xAE, 0xC7, 0xC9, 0xDE, 0xB8, 0xF0, 0xB3, 0xC8, 0x3C, 0x06, 0x91, 0x32, 
0x46, 0x20, 0xCA, 0xB1, 0xE0, 0x0D, 0x57, 0xA3, 0x05, 0x26, 0x5F, 0x59, 0x03, 0x46, 0x1C, 0x78, 0x00, 0xC3, 0x18, 0xE9, 
0x30, 0x4C, 0xB2, 0xA5, 0x3E, 0x60, 0xF9, 0x54, 0x27, 0x95, 0xBD, 0x76, 0x30, 0xC5, 0x00, 0x9A, 0x04, 0xD9, 0x0C, 0x0F, 
0x86, 0xA4, 0xF7, 0x6A, 0xDF, 0x1D, 0x34, 0x62, 0x4B, 0x7D, 0xA3, 0x65, 0x94, 0x29, 0xC7, 0x0C, 0x08, 0x0B, 0xE0, 0x21, 
0x81, 0x81, 0x19, 0x7F, 0xB7, 0x0C, 0x91, 0x18, 0xD9, 0x2A, 0x1A, 0x59, 0x84, 0x20, 0x0A, 0x67, 0xAC, 0x56, 0x6B, 0xE8, 
0xFE, 0xBF, 0x4D, 0x92, 0x26, 0x7B, 0x54, 0xE0, 0x2E, 0xEE, 0xA8, 0x11, 0xFF, 0x5D, 0xA1, 0x9D, 0x37, 0x21, 0x22, 0xE6, 
0xDB, 0xAE, 0x5F, 0xCA, 0x24, 0x93, 0xE5, 0x10, 0xF8, 0x81, 0x41, 0x48, 0x17, 0x0C, 0x63, 0x3D, 0xA7, 0x36, 0xFD, 0x37, 
0x29, 0xDB, 0xFF, 0xDD, 0x85, 0xA8, 0x03, 0xA8, 0x96, 0x08, 0x06, 0xCF, 0x6E, 0xD9, 0x07, 0x7C, 0x06, 0xE9, 0xE3, 0x90, 
0xEB, 0x81, 0xDB, 0x43, 0x4A, 0x8B, 0xFD, 0xBC, 0x11, 0x95, 0x9B, 0x1D, 0xCA, 0x4C, 0x8A, 0x05, 0x65, 0xD0, 0xC1, 0x9F, 
0x6D, 0xF9, 0xEF, 0xE6, 0x15, 0x94, 0x75, 0x42, 0x00, 0x9A, 0x18, 0x20, 0x4B, 0x44, 0xFF, 0xB8, 0x6E, 0xE2, 0x85, 0xDE, 
0x3C, 0x23, 0x5F, 0x26, 0x91, 0x46, 0x19, 0xA2, 0x87, 0xF1, 0xEB, 0xE0, 0x06, 0x07, 0xBB, 0x47, 0xC2, 0x64, 0xE5, 0xD3, 
0xBA, 0x5F, 0xE6, 0x21, 0x6D, 0xC1, 0x56, 0x72, 0x96, 0x80, 0x78, 0x3C, 0x8E, 0x07, 0x92, 0x4F, 0xA8, 0xDF, 0x0B, 0xA7, 
0xAD, 0xEF, 0x89, 0xC0, 0xBA, 0x60, 0xA0, 0x61, 0xF8, 0xA1, 0xF4, 0x40, 0x35, 0x68, 0xC8, 0xF4, 0xA6, 0x27, 0x59, 0x47, 
0xC7, 0x92, 0x41, 0xFA, 0xF4, 0x8D, 0xDC, 0x5F, 0xB9, 0xE3, 0x1C, 0x20, 0xC7, 0x74, 0xE4, 0xDB, 0x87, 0x13, 0xC2, 0x71, 
0x5C, 0xA9, 0x01, 0x1E, 0x51, 0x19, 0xA0, 0x92, 0x78, 0xA3, 0x22, 0x31, 0x82, 0xDB, 0xCE, 0x7B, 0xE4, 0x4F, 0x0B, 0x04, 
0x12, 0x40, 0x0F, 0x9F, 0xD0, 0xBE, 0x1A, 0xD2, 0xD0, 0x51, 0x30, 0x8D, 0x49, 0xB9, 0xBD, 0xE6, 0x9F, 0x16, 0x8E, 0x5D, 
0xE3, 0x2C, 0x8C, 0xA3, 0x21, 0x1F, 0x8F, 0x62, 0x32, 0xF8, 0xC7, 0xCD, 0xA7, 0x56, 0x45, 0xFE, 0x75, 0xDA, 0x2A, 0x71, 
0xA5, 0x45, 0x1B, 0xF5, 0x39, 0x18, 0x32, 0x4C, 0x0C, 0x36, 0x84, 0x71, 0xA4, 0x57, 0x45, 0x68, 0x9B, 0x99, 0xBC, 0xCC, 
0x49, 0xB3, 0x84, 0xCB, 0x72, 0x70, 0x22, 0x46, 0xA6, 0x4C, 0xFB, 0xE7, 0x9E, 0x99, 0x0F, 0x08, 0x97, 0x36, 0x45, 0x62, 
0x0A, 0x8B, 0xF0, 0x57, 0x25, 0x53, 0xA0, 0xD9, 0x8C, 0x63, 0x3F, 0x60, 0xF5, 0x90, 0x98, 0x6A, 0x7D, 0x5A, 0xCF, 0x49, 
0x37, 0x0B, 0x9A, 0x61, 0xB2, 0x1C, 0x55, 0x08, 0x55, 0x3C, 0x5B, 0x7D, 0xF2, 0x0E, 0xCB, 0x24, 0xC2, 0x62, 0x68, 0x06, 
0x58, 0xA8, 0x85, 0xF1, 0x3A, 0xFA, 0x77, 0x3B, 0x90, 0xE6, 0x00, 0xC8, 0xC9, 0x30, 0xED, 0xE6, 0x41, 0x1E, 0x3D, 0x3C, 
0x4E, 0x4C, 0x88, 0xC4, 0x6D, 0xA4, 0xD1, 0x66, 0x33, 0xCB, 0xA8, 0xD3, 0x95, 0x4D, 0x28, 0x0C, 0x88, 0xC0, 0xD9, 0x83, 
0xE1, 0xA8, 0x30, 0x3C, 0xAA, 0x8E, 0x9C, 0x06, 0x02, 0x51, 0x58, 0xD2, 0x41, 0xBA, 0x7E, 0x92, 0x8E, 0x46, 0x1E, 0x30, 
0x0F, 0x1A, 0xC0, 0xA9, 0xC3, 0x76, 0xEF, 0x26, 0x5D, 0x1F, 0x0B, 0x91, 0x61, 0x48, 0x04, 0x47, 0xE7, 0xF3, 0x87, 0x8F, 
0x82, 0xF8, 0xA5, 0x91, 0x0E, 0x43, 0x16, 0x78, 0x2E, 0x57, 0x4D, 0x9F, 0xF0, 0xF3, 0x62, 0x62, 0x32, 0x86, 0x16, 0x72, 
0x60, 0x1E, 0xBB, 0x7F, 0x26, 0x8A, 0x2F, 0x9A, 0x08, 0x31, 0xB4, 0xD0, 0x43, 0xAA, 0x43, 0xFB, 0x49, 0xD8, 0xBE, 0x78, 
0xD1, 0x31, 0x94, 0x90, 0x67, 0xAE, 0x78, 0xFA, 0x55, 0xDC, 0xE4, 0x70, 0x12, 0x62, 0x68, 0xA1, 0x87, 0xC5, 0x4B, 0x71, 
0x2F, 0x2B, 0x33, 0x5C, 0x74, 0x18, 0x99, 0xE8, 0x19, 0xCF, 0xE1, 0xB8, 0x13, 0xC5, 0x19, 0x9B, 0x74, 0x18, 0xC9, 0xA8, 
0x19, 0xEB, 0x36, 0xB9, 0xB6, 0x64, 0x75, 0x98, 0x88, 0x28, 0x19, 0xC2, 0xED, 0xCA, 0xF5, 0xED, 0xA4, 0x8B, 0x39, 0xDB, 
0x74, 0x18, 0x92, 0x11, 0x33, 0xD2, 0xA5, 0x93, 0x37, 0x6F, 0x17, 0x17, 0x68, 0x60, 0x87, 0xC9, 0x9E, 0x83, 0xAB, 0x66, 
0xB9, 0x0A, 0x3F, 0x19, 0x75, 0x1D, 0xCC, 0x29, 0xF1, 0xE3, 0x75, 0x26, 0xFB, 0x59, 0x9D, 0x14, 0x60, 0xE5, 0x22, 0x10, 
0xE4, 0xED, 0xB8, 0xE5, 0x8C, 0xA9, 0xCA, 0x33, 0x48, 0xCB, 0x45, 0x24, 0xE3, 0x71, 0x9C, 0xDF, 0x8C, 0x57, 0x7D, 0x24, 
0x08, 0x95, 0x83, 0xC8, 0xC4, 0x6C, 0x38, 0xFE, 0x40, 0x47, 0xA5, 0x2E, 0x10, 0x06, 0x44, 0xD0, 0xE6, 0x2E, 0xB8, 0xDC, 
0xD4, 0xF5, 0x74, 0x04, 0x0A, 0x15, 0x24, 0xD0, 0xE6, 0x2A, 0xB8, 0x7C, 0x39, 0x1F, 0x83, 0x27, 0xAA, 0x0A, 0x2C, 0xD8, 
0xD0, 0xED, 0xDA, 0xFB, 0x82, 0xCE, 0xDF, 0x5B, 0x51, 0x29, 0xB2, 0x80, 0xC9, 0x57, 0x69, 0xEC, 0x66, 0x7D, 0x4F, 0x36, 
0xA8, 0x63, 0x50, 0x00, 0x67, 0x9F, 0xC4, 0xF9, 0xCF, 0xF8, 0x75, 0x30, 0x35, 0x8D, 0x43, 0x81, 0x9C, 0xDE, 0x9B, 0x63, 
0x1F, 0xDC, 0x7D, 0x32, 0x42, 0x19, 0x62, 0x01, 0xBC, 0x77, 0xA9, 0xC3, 0x1F, 0x24, 0x59, 0x8D, 0x27, 0x21, 0x62, 0x01, 
0x79, 0x94, 0xE5, 0xD2, 0xEF, 0x94, 0xBE, 0x19, 0xAB, 0x0E, 0xB1, 0x80, 0x1E, 0x9B, 0xB7, 0xCE, 0xAF, 0xE2, 0x7E, 0xA7, 
0xA3, 0x50, 0xA1, 0x84, 0x03, 0x36, 0x1F, 0x92, 0x17, 0xFF, 0xFA, 0x35, 0x52, 0x99, 0x22, 0x11, 0x71, 0x14, 0xDD, 0x6E, 
0xD7, 0x52, 0x97, 0xD3, 0x98, 0x8E, 0x02, 0x0B, 0x75, 0x6E, 0x8E, 0x5F, 0x4E, 0xE0, 0x4F, 0xF1, 0xCC, 0xA3, 0x64, 0x44, 
0xF3, 0xF2, 0x4E, 0xBB, 0x93, 0xF6, 0x1C, 0x70, 0xCC, 0xC2, 0xBA, 0x88, 0x6D, 0x7B, 0x0E, 0x9F, 0x3A, 0xDA, 0xE2, 0x16, 
0x92, 0x38, 0xC8, 0x60, 0x7E, 0x49, 0x7B, 0x05, 0x77, 0x7E, 0xA9, 0x38, 0xA7, 0x61, 0x90, 0xA1, 0x3D, 0x9F, 0xC7, 0x46, 
0x7B, 0xCA, 0x4F, 0x0C, 0xD1, 0x28, 0x04, 0x49, 0x7E, 0x0A, 0xFB, 0x87, 0x33, 0x76, 0x27, 0x98, 0x6A, 0x18, 0x82, 0x9C, 
0xF7, 0xF1, 0x72, 0x21, 0xAF, 0xFC, 0x4C, 0x10, 0x0B, 0x33, 0x98, 0xF2, 0x28, 0x0E, 0x3D, 0x39, 0x44, 0x79, 0x03, 0x2C, 
0x8C, 0x90, 0x80, 0x7D, 0xD0, 0x3B, 0xCD, 0x79, 0x7E, 0x27, 0x82, 0x45, 0x19, 0x0C, 0xD8, 0x17, 0xB5, 0x5E, 0x9D, 0x52, 
0x5F, 0x14, 0x8A, 0x12, 0x20, 0x39, 0x1B, 0x6B, 0xA7, 0x3B, 0x65, 0x77, 0x28, 0x40, 0x14, 0x28, 0xD1, 0x2D, 0x88, 0xF7, 
0xF0, 0x38, 0x0E, 0xAA, 0x11, 0x1C, 0x08, 0xD9, 0x35, 0x6C, 0x1B, 0xED, 0x9F, 0x03, 0x09, 0x0C, 0x04, 0x4A, 0x59, 0xA7, 
0xE1, 0x21, 0x3F, 0x87, 0xC1, 0x14, 0x84, 0x12, 0xA5, 0x3D, 0x8C, 0x69, 0xA5, 0xF9, 0xA0, 0x61, 0x41, 0x10, 0xA8, 0x59, 
0x76, 0xA7, 0xA4, 0xCF, 0x71, 0x21, 0x05, 0x50, 0x80, 0x75, 0xBB, 0x27, 0xD0, 0xD9, 0xE0, 0x12, 0x84, 0x51, 0xE5, 0xF1, 
0xA6, 0xCA, 0xBB, 0xE1, 0x28, 0x41, 0x81, 0x44, 0x2D, 0xB4, 0xE4, 0x35, 0xB1, 0x54, 0x54, 0x54, 0xED, 0xED, 0x99, 0xBC, 
0x10, 0x04, 0x00, 0xA0, 0x3F, 0x58, 0x63, 0x43, 0x04, 0x0B, 0x00, 0x23, 0xA4, 0x2A, 0xE2, 0x01, 0x78, 0xA8, 0x25, 0x94, 
0xBA, 0x41, 0xE5, 0x66, 0x90, 0xFE, 0x77, 0x76, 0x70, 0x6B, 0x6C, 0x00, 0x00, 0x00, 0x07, 0x04, 0x00, 0x00, 0xCA, 0x08, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x29, 
0x4C, 0x49, 0x53, 0x54, 0x4A, 0x00, 0x00, 0x00, 0x49, 0x4E, 0x46, 0x4F, 0x49, 0x53, 0x46, 0x54, 0x3E, 0x00, 0x00, 0x00, 
0x46, 0x69, 0x6C, 0x65, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x47, 0x6F, 0x6C, 0x64, 
0x57, 0x61, 0x76, 0x65, 0x2E, 0x20, 0x20, 0x47, 0x6F, 0x6C, 0x64, 0x57, 0x61, 0x76, 0x65, 0x20, 0x63, 0x6F, 0x70, 0x79, 
0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x28, 0x43, 0x29, 0x20, 0x43, 0x68, 0x72, 0x69, 0x73, 0x20, 0x43, 0x72, 0x61, 0x69, 
0x67, 0x00

    ];
	
	static var wpc : WavpackContext;
	static var sampleRate : Float;
	static var num_channels : Int;
	static var samples_unpacked : Float;
	static var floatDivisor : Float;
	static var total_unpacked_samples : Float;
	static var bps : Int;
	static var floatSamples : Array < Float >;

	public static function main()	
    {
		/*
		** In this main we use the sample data above
		** I just comment out the call to main in the generated JavaScript and call
		** the methods separately
		*/
		
		var samples_processed : Int = 0;
		var myCheck : Int = 1;
		var samples_to_unpack : Int;
		
		setUpPlayer(sampleWavPackFile);
		
		samples_to_unpack = Defines.SAMPLE_BUFFER_SIZE;
		
		while(myCheck==1)
		{
			samples_processed = decodeWavPackData(samples_to_unpack);
			if(samples_processed==0)
			{
				myCheck = 0;
			}
		}

        if ((WavPackUtils.WavpackGetNumSamples(wpc) != -1)
            && (total_unpacked_samples != WavPackUtils.WavpackGetNumSamples(wpc)))
        {
            trace("Incorrect number of samples");
        }

        if (WavPackUtils.WavpackGetNumErrors(wpc) > 0)
        {
            trace("CRC errors detected");
        }

		trace("all data processed :) ");
	}
	

    public static function setUpPlayer(srcData : Array < Int >)	
    {
        var total_samples : Int = 0;
        var start : Float = 0;
        var end : Float = 0;

		var playFileLength = srcData.length;

		var playFileAsBytes = haxe.io.Bytes.alloc(playFileLength);
		

		for(i in 0 ... playFileLength)
		{
			playFileAsBytes.set(i, srcData[i]);
		}


		var bi : haxe.io.BytesInput = new haxe.io.BytesInput(playFileAsBytes, 0, playFileLength);

		
		wpc = new WavpackContext();
		sampleRate = 0;
		num_channels = 1;
		bps = 0;

        try
        {
             wpc = WavPackUtils.WavpackOpenFileInput(bi);
        }
        catch (err: Dynamic)
        {
            trace("Error opening file.");
        }

        if (wpc.error)
        {
            trace("Sorry an error has occured");
			trace(wpc.error_message);
        }

        num_channels = WavPackUtils.WavpackGetReducedChannels(wpc);

        trace("The wavpack file has " + num_channels + " channels");

        total_samples = Math.floor(WavPackUtils.WavpackGetNumSamples(wpc));

        trace("The wavpack file has " + total_samples + " samples");

        bps = WavPackUtils.WavpackGetBytesPerSample(wpc);

        trace("The wavpack file has " + bps + " bytes per sample");

		sampleRate = WavPackUtils.WavpackGetSampleRate(wpc);
	
		trace("The sample rate for the file is " + sampleRate);
		
		floatDivisor = Math.pow(2, ((bps*8)-1));		// needed to convert PCM data to float format
		
		temp_buffer[ Defines.SAMPLE_BUFFER_SIZE ] = 0;                                       // pre-size the array (one more than needed)
		
		total_unpacked_samples = 0;
		
		floatSamples = new Array();
	}
	
	public static function decodeWavPackData(myBufferSize : Int) : Int
	{
		var bytesToWrite : Int = 0;
		
		var samplesToRetrieve : Float;
		
		samplesToRetrieve = (myBufferSize / num_channels);
		
		if(myBufferSize > Defines.SAMPLE_BUFFER_SIZE)
		{
			trace("Sorry, you are requesting too much data");
			samplesToRetrieve = Defines.SAMPLE_BUFFER_SIZE / num_channels;
		}
	
		try
		{
                samples_unpacked = WavPackUtils.WavpackUnpackSamples(wpc, temp_buffer, samplesToRetrieve);	

                total_unpacked_samples += samples_unpacked;

                if (samples_unpacked > 0)
                {
                    samples_unpacked = samples_unpacked * num_channels;								
                    
                    bytesToWrite = Math.floor(samples_unpacked);                   
                    for(i in 0 ... bytesToWrite)
                    {
						floatSamples[i] = temp_buffer[i] / floatDivisor;
                    } 
                }
        }
        catch (err: Dynamic)
        {
            var es = haxe.CallStack.exceptionStack();
            trace(haxe.CallStack.toString(es));
            trace("Error when decoding WavPack data, sorry: ");           
        }
		
		return (bytesToWrite);
		
    }

}
